#include <bits/stdc++.h>
using namespace std;
#define n 7
#define INF 1000000

void costMatrix(int cost[n][n]);
void floydWarshall(int graph[n][n]) {
  int cost[n][n], i, j, k;

  for (i = 0; i < n; i++)
    for (j = 0; j < n; j++)
      cost[i][j] = graph[i][j];

  for (k = 0; k < n; k++) {
    for (i = 0; i < n; i++) {
      for (j = 0; j < n; j++) {
        if (cost[i][k] + cost[k][j] < cost[i][j])
          cost[i][j] = cost[i][k] + cost[k][j];
      }
    }
  }
  costMatrix(cost);
}

void costMatrix(int cost[n][n]) {
	cout<<"Hence the cost matrix using the Floyed Warshall algorithim is : \n"<<endl;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (cost[i][j] == INF)
        printf("%4s", "INF");
      else
        printf("%4d", cost[i][j]);
    }
    cout<<endl;
  }
}

int main() {
  int graph[n][n] = {{0, 3, 6, INF, INF, INF, INF},
   {3, 0, 2, 1, INF, INF, INF},
   {6, 2, 0, 1, 4, 2, INF},
   {INF, 1, 1, 0, 2, INF, 4},
   {INF, INF, 4, 2, 0, 2, 1},
   {INF, INF, 2, INF, 2, 0, 1},
   {INF, INF, INF, 4, 1, 1, 0}
   };
  floydWarshall(graph);
}
